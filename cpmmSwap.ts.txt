import { ApiV3PoolInfoStandardItemCpmm, CurveCalculator, CREATE_CPMM_POOL_PROGRAM, DEV_CREATE_CPMM_POOL_PROGRAM, CpmmPoolInfoLayout, CpmmConfigInfoInterface } from '@raydium-io/raydium-sdk-v2';
import { Raydium, TxVersion, parseTokenAccountResp, CpmmKeys } from '@raydium-io/raydium-sdk-v2'
import { optimizedSendAndConfirmTransaction, wrapLegacyTx } from "../../dex/utils";
import { Connection, Keypair, PublicKey, VersionedTransaction, Transaction, TransactionMessage, AddressLookupTableAccount } from '@solana/web3.js'
import { CONNECTION, GLOBAL_SLIPPAGE, GLOBAL_PRIORITY_FEE, SOL_ADDRESS, SwapParams } from '../../3_config';
import BigNumber from 'bignumber.js';
import dotenv from 'dotenv'; dotenv.config();
import bs58 from 'bs58'
import BN from 'bn.js'
import { TransactionInstruction } from '@solana/web3.js';

export const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
export const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');
const RETRY_INTERVAL = 200;
const VALID_PROGRAM_ID = new Set([CREATE_CPMM_POOL_PROGRAM.toBase58(), DEV_CREATE_CPMM_POOL_PROGRAM.toBase58()])
export const isValidCpmm = (id: string) => VALID_PROGRAM_ID.has(id)

export const txVersion = TxVersion.V0;

let raydium: Raydium | undefined;

export async function initSdk(wallet: Keypair, connection: Connection) {
  if (raydium) return raydium;
  raydium = await Raydium.load({
    owner: wallet,
    connection,
    cluster: 'mainnet',
    disableFeatureCheck: true,
    disableLoadToken: false
  });
  return raydium
}

export async function raydium_cpmm_swap(params: SwapParams): Promise<string | null> {
  let cnx = CONNECTION;
  let poolKeys: CpmmKeys | undefined;
  
  const raydium = await initSdk(params.wallet, cnx);

  // get pool id
  const poolId: string = await getRayCpmmPoolKeys({ t1: params.token, t2: SOL_ADDRESS, connection: cnx });
  if (!poolId) throw new Error(`No CPMM pool Id found for token ${params.token}`);


  // get cpmm pool keys
  const data = await raydium.api.fetchPoolById({ ids: poolId! });

  const poolInfo = data[0] as ApiV3PoolInfoStandardItemCpmm;

  console.log("CPMM --> ", params.side, "-c>", "\n", params.wallet.publicKey.toBase58(), "\n", params, "\n");

  const inputMint = params.side == 'buy' ? poolInfo.mintA.address : poolInfo.mintB.address;
  const baseIn = inputMint === poolInfo.mintA.address
  if (!isValidCpmm(poolInfo.programId)) throw new Error('target pool is not CPMM pool');
  const rpcData = await raydium.cpmm.getRpcPoolInfo(poolId, true);

  // quote swap pool mintA for mintB
  const swapResult = CurveCalculator.swap(
    new BN((params.amount)),
    baseIn ? rpcData.baseReserve : rpcData.quoteReserve,
    baseIn ? rpcData.quoteReserve : rpcData.baseReserve,
    rpcData.configInfo!.tradeFeeRate
  );

  console.log("swapResult --> ",JSON.parse(JSON.stringify(swapResult)));

  // get Cpmm Swap instruction inx
  // range: 1 ~ 0.0001, means 100% ~ 0.01%e
  let { transaction } = await raydium.cpmm.swap({
    poolInfo,
    poolKeys,
    payer: params.wallet.publicKey,
    baseIn,
    slippage: 1,
    swapResult,
    inputAmount: new BN(params.amount),
    computeBudgetConfig: {
      microLamports: 10_000
    }
  });

  let txSig: any = '';
  if (transaction instanceof Transaction) {
    const tx = new VersionedTransaction(wrapLegacyTx(transaction.instructions, params.wallet, (await cnx.getLatestBlockhash())));
    tx.sign([params.wallet]);

    // send tx
    txSig = await optimizedSendAndConfirmTransaction(params.wallet,tx, cnx, (await cnx.getLatestBlockhash()), RETRY_INTERVAL);

  } else if (transaction instanceof VersionedTransaction) {
    const addressLookupTableAccounts = await Promise.all(
      transaction.message.addressTableLookups.map(async (lookup) => {
        return new AddressLookupTableAccount({
          key: lookup.accountKey,
          state: AddressLookupTableAccount.deserialize(
            await cnx.getAccountInfo(lookup.accountKey).then((res) => res!.data)),
        })
      }));
    const message = TransactionMessage.decompile(transaction.message, { addressLookupTableAccounts: addressLookupTableAccounts });
    transaction.message = message.compileToV0Message(addressLookupTableAccounts);
    transaction.sign([params.wallet]);

    // send TX
    txSig = await optimizedSendAndConfirmTransaction(
      params.wallet,
      new VersionedTransaction(transaction.message), cnx, (await cnx.getLatestBlockhash()), RETRY_INTERVAL
    );
  }
  return txSig;
}

export async function getRayCpmmPoolKeys({ t1, t2, connection }: { t1: string, t2: string, connection: Connection }): Promise<string> {

  const commitment = "processed";
  const RAYDIUM_CPMM = new PublicKey('CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C');

  const baseMint = new PublicKey(t1);
  const quoteMint = new PublicKey(t2);

  const accounts = await connection.getProgramAccounts(
    RAYDIUM_CPMM,
    {
      commitment,
      filters: [
        { dataSize: CpmmPoolInfoLayout.span },
        {
          memcmp: {
            offset: CpmmPoolInfoLayout.offsetOf("mintB"),
            bytes: baseMint.toBase58(),
          },
        },
        {
          memcmp: {
            offset: CpmmPoolInfoLayout.offsetOf("mintA"),
            bytes: quoteMint.toBase58(),
          },
        },
      ],
    }
  );
  // console.log('A: ', CpmmPoolInfoLayout.offsetOf("mintA"));
  // console.log('B: ', CpmmPoolInfoLayout.offsetOf("mintB"));
  // console.log('span: ', CpmmPoolInfoLayout.span);
  let poolId = accounts && accounts[0] && accounts[0].pubkey;
  // console.log("CPMM poolId: ", poolId?.toBase58());
  return poolId.toBase58();
}

export const fetchTokenAccountData = async (wallet: Keypair, connection: Connection) => {
  const solAccountResp = await connection.getAccountInfo(wallet.publicKey)
  const tokenAccountResp = await connection.getTokenAccountsByOwner(wallet.publicKey, { programId: TOKEN_PROGRAM_ID })
  const token2022Req = await connection.getTokenAccountsByOwner(wallet.publicKey, { programId: TOKEN_2022_PROGRAM_ID })
  const tokenAccountData = parseTokenAccountResp({
    owner: wallet.publicKey,
    solAccountResp,
    tokenAccountResp: {
      context: tokenAccountResp.context,
      value: [...tokenAccountResp.value, ...token2022Req.value],
    },
  })
  return tokenAccountData
}

export async function getpoolDataCpmm(wallet: Keypair, poolID: any, connection: any): Promise<any | null> {
  const raydium = await initSdk(wallet, connection);
  if (!poolID) {
    console.error('Pool Cpmm not found')
    return null;
  }
  const data = await raydium.api.fetchPoolById({ ids: String(poolID) })
  const poolInfo = data[0] as ApiV3PoolInfoStandardItemCpmm;
  return poolInfo;
}
// getpoolDataCpmm()
/**
 * By default: sdk will automatically fetch token account data when need it or any sol balace changed.
 * if you want to handle token account by yourself, set token account data after init sdk
 * code below shows how to do it.
 * note: after call raydium.account.updateTokenAccount, raydium will not automatically fetch token account
 */

// raydium.account.updateTokenAccount(await fetchTokenAccountData())
// connection.onAccountChange(wallet.publicKey, async () => {
//     raydium!.account.updateTokenAccount(await fetchTokenAccountData())
// })
